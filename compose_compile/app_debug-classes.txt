stable class GPApplication {
  <runtime stability> = Stable
}
stable class MainActivity {
  <runtime stability> = Stable
}
stable class Main {
  <runtime stability> = Stable
}
stable class PersonDetail {
  stable val PARAM: String
  stable val path: String
  <runtime stability> = Stable
}
stable class TombDetail {
  stable val PARAM: String
  stable val path: String
  <runtime stability> = Stable
}
stable class RouterItems {
  stable val route: String
  <runtime stability> = Stable
}
unstable class RouterViewModel {
  unstable val personUseCase: PersonUseCaseInterface
  unstable val tombUseCase: TombUseCaseInterface
  stable var tab$delegate: MutableState<NaviItems>
  stable var cameraPosition$delegate: MutableState<CameraPosition>
  <runtime stability> = Unstable
}
stable class Map {
  <runtime stability> = Stable
}
stable class Person {
  <runtime stability> = Stable
}
stable class Favorite {
  <runtime stability> = Stable
}
stable class NaviItems {
  stable val route: String
  stable val titleResId: Int
  stable val icon: ImageVector
  <runtime stability> = Stable
}
stable class FavoritePersonUiState {
  stable val isLoading: Boolean
  stable val errorMessage: String?
  stable val isLastPage: Boolean
  <runtime stability> = Stable
}
unstable class FavoritePersonViewModel {
  unstable val _uiState: MutableStateFlow<FavoritePersonUiState>
  unstable val uiState: StateFlow<FavoritePersonUiState>
  unstable val personFavorites: Flow<PagingData<PersonEntity>>
  <runtime stability> = Unstable
}
unstable class TombDataModel {
  unstable val tomb: TombEntity
  unstable val persons: List<PersonEntity>
  stable val isWindowVisible: Boolean
  <runtime stability> = Unstable
}
stable class MapUiState {
  unstable val tombs: List<TombDataModel>
  stable val isLoading: Boolean
  stable val errorMessage: String?
  stable val lastBackPressedTime: Long
}
unstable class MapViewModel {
  unstable val personUseCase: PersonUseCaseInterface
  unstable val tombUseCase: TombUseCaseInterface
  unstable val _uiState: MutableStateFlow<MapUiState>
  unstable val uiState: StateFlow<MapUiState>
  <runtime stability> = Unstable
}
stable class PersonUiState {
  unstable val personData: List<PersonEntity>
  stable val isLoading: Boolean
  stable val errorMessage: String?
  stable val isLastPage: Boolean
}
unstable class PersonListViewModel {
  unstable val personUseCase: PersonUseCaseInterface
  unstable val _uiState: MutableStateFlow<PersonUiState>
  unstable val uiState: StateFlow<PersonUiState>
  unstable var lastVisibleDocument: DocumentSnapshot?
  unstable val favoriteFlow: Flow<Set<PersonEntity>>
  <runtime stability> = Unstable
}
